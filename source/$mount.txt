$mount执行顺序
加载js
src/core/instance/lifecycle.js
  mountComponent
|
src/platforms/web/runtime/index.js
  Vue.prototype.$mount = function(){...}
|
src/platforms/web/entry-runtime-with-compiler.js
  const mount = Vue.prototype.$mount
  Vue.prototype.$mount = function(){...}

createCompileToFunctionFn src/compiler/to-function.js
compile src/compiler/create-compiler.js
baseCompile src/compiler/index.js
baseOptions src/platforms/web/compiler/options.js


声明一个Vue实例,new Vue()
调用_init,this._init() src/core/instance/index.js 
调用$mount vm.$mount() src/core/instance/init.js
web平台，重写vm.$mount，最终伪调用mount，mount其实是Vue.prototype.$mount src/platforms/web/entry-runtime-with-compiler.js
Vue.prototype.$mount内，调用mountComponent src/platforms/web/runtime/index.js
mountComponent函数内，创建渲染函数的watcher实例，传入参数：vm,updateComponent,noop,{...},true 
创建watcher实例中，因为options.lazy为false，因此调用this.get方法，this.get方法内调用了updateComponent函数 src/core/observer/watcher.js
updateComponent函数内调用vm._update(vm._render(), hydrating) src/core/instance/lifecycle.js
vm._render是在js加载时，调用renderMixin方法时定义的 src/core/instance/render.js
  vm._render内部调用vm.$options.render,这个函数是在web平台$mount方法内已经生成（src/platforms/web/entry-runtime-with-compiler.js）
  src/platforms/web/entry-runtime-with-compiler.js
  {render, staticRenderFns} 是createCompileToFunctionFn返回的匿名函数被调用的结果
  这个匿名函数可以访问到compile、baseCompile、baseOptions三个参数

  render是根据compile(template, options)返回值compiled.render，生成一个函数
  compile函数实际调用baseCompile函数
  baseCompile函数
    1、将模板和选项转为ast
    2、ast优化，检测静态attrs、class、静态dom子树
    2、通过generate函数，生成render函数的原始字符串和staticRenderFns原始字符串
  generate函数根据ast和选项生成render和staticRenderFns的原始字符串
  render函数字符串最终包含_c和实例选项
  调用render函数，则触发了data的getter，收集依赖,返回VNode对象
vm._update是在js加载时，调用lifecycleMixin方法时定义的 src/core/instance/lifecycle.js
  vm._update是调用vm.prototype.__patch__方法，将其返回值替换$el。

Vue.prototype.__patch__(src/platforms/web/runtime/index.js)
  浏览器，__patch为patch(src/platforms/web/runtime/patch.js)；其他，为空函数


patch是createPatchFunction(src/core/vdom/patch.js)的返回值（patch函数），传入参数是nodeOps(src/platforms/web/runtime/node-ops.js)、
modules是plateformModules(src/platforms/web/runtime/modules/index)和baseModules(src/core/vdom/modules/index)合并后的数组

modules包含create、update和destroy钩子函数

调用nodeOps的tagName方法，获取元素节点标签名

调用createPatchFunction函数，返回patch函数，接收4个参数：oldNode、vnode、hydrating和removeOnly

调用patch函数，若为初始渲染，需要以vm.$el的元素节点生成一个vnode节点，作为旧dom树节点
若为更新渲染，则调用patchVnode，对比新旧vDom树，并更新vm.elm