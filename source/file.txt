Vue构造函数寻找路径
->
 config中input:src/platforms/web/entry-runtime-with-compiler.js
 ->
 entry-runtime-with-compiler.js中import Vue from './runtime/index        再添加编译器
 ->                                                                        ^
 index.js中import Vue from 'core/index'                                  再添加平台特定配置、指令、组件和方法
 ->                                                                        ^
 index.js中import Vue from './instance/index'                            再添加静态属性和方法（全局API）
 ->                                                                        ^
 index.js中function Vue(...){...}                                        定义Vue构造函数，添加实例属性和方法

 Vue静态属性和方法
 core/index


 Vue平台化包装，添加与平台相关的组件、命令和一些特殊功能
 /platforms
 ->
  web
  weex


core/instance/init.js
mark/measure -- core/util/perf.js 计算性能
mergeOptions -- core/util/options.js 选项合并
->规范化
  checkComponents + validateComponentName 验证注册组件名称是否合法
  -> isBuiltInTag -- src/shared/util 判断注册组件是否为Vue的内置标签（slot、component）
     isReservedTag -- core/platforms/web/util/element 判断注册组件是否为HTML标签、SVG标签
  
  normalizeProps 格式化props属性
  -> camelize -- src/shared/util 短横线转换为驼峰
     isPlainObject -- src/shared/util 判断是否为一个纯对象
     toRawType -- src/shared/util 获取数据类型
  
  normalizeInject 格式化inject属性
  -> isPlainObject -- src/shared/util 判断是否为一个纯对象
     toRawType -- src/shared/util 获取数据类型

  normalizeDirectives 格式化Directives属性

->选项合并
    mergeField 选择不同策略进行选项合并
    hasOwn -- src/shared/util 判断对象是否含有某个实例属性
    defaultStrat 默认选项合并策略
    strats 一些选项合并函数
    -> el/propsData 
       data 返回一个函数，并将选项合并的结果保存在函数内
       -> mergeDataOrFn 
         -> mergeData data选项终极合并函数
           -> hasSymbol -- src/core/util/env.js 当前环境是否支持符号属性
              hasOwn -- src/shared/util 判断对象是否含有某个实例属性
              set -- src/core/observer/index 添加对象实例属性和通知属性已删除
              -> isUndef --src/shared/util 判断数据是否为undefined或null 
                 isPrimitive --src/shared/util 判断数据是否基本类型 
            
       生命周期 -- src/shared/constants
       beforeCreate
       created
       beforeMount
       mounted
       beforeUpdate
       updated
       beforeDestroy
       destroyed
       activated
       deactivated
       errorCaptured
       serverPrefetch

       资源（assets） -- src/shared/constants
       components 
       directives
       filters
       -> mergeAssets
          -> assertObjectType 判断对象是否为一个纯对象，否，则警告
             -> isPlainObject -- src/shared/util 判断是否为一个纯对象
          -> extend --src/shared/util 对象合并
       watch
       -> nativeWatch --src/core/util/env firefox浏览器Object原型内置watch
     
       props/methods/inject/computed
       -> assertObjectType 判断对象是否为一个纯对象，否，则警告
          extend --src/shared/util 对象合并

       provide

initProxy --src/core/instance/proxy.js Vue实例对象添加_renderProxy，代理Vue实例对象，渲染函数作用域代理，为了在开发阶段给提示
   -> hasProxy 宿主环境js是否支持原生Proxy
      hasHandler 代理拦截has行为
      -> allowedGlobals 判定关键字是否在指定的字符串内
         warnReservedPrefix 方法或属性在data中存在，但实例对象中不存在，发出警告
         warnNonPresent  警告，关键字不存在于data和实例对象，发出警告
      getHandler 代理拦截get行为
      -> warnReservedPrefix 方法或属性在data中存在，但实例对象中不存在，发出警告
         warnNonPresent  警告，关键字不存在于data和实例对象，发出警告
initLifecycle --src/core/instance/lifecycle.js 初始化生命周期
initEvents --src/core/instance/events.js 初始化事件
  -> updateComponenetListeners 更新组件事件监听
    -> updateListeners --src/core/vdom/helpers/update-listeners.js 在目标实例上添加事件监听 
initRender --src/core/instance/render.js 初始化渲染
  -> resolveSlots --src/core/instance/render-helpers/resolve-slots.js 解析处理slot
     createElement --src/core/vdom/create-element.js 创建虚拟DOM元素
     emptyObject -- src/shared/util.js 被冻结的空对象
     defineReative --src/core/observer/index.js 为对象定义响应属性
     isUpdatingChildComponent --src/core/instance/lifecycle.js 判断updateChildComponent函数是否在执行中
callHook --src/core/instance/lifecycle.js 执行生命周期钩子对应的函数数组
initState --src/core/instance/state.js 初始化数据响应系统
  -> initProps
     initMethods
     initData 判断是否重名，将data选项转换为响应式数据
       -> getData  执行选项合并后data函数，并返回执行结果
          isReserved --src/core/util/lang.js 判断字符串是否以$/_为开头
          proxy data属性以访问器形式挂载在当前Vue实例的_data上
            -> noop --src/shared/util 空函数
          observe --src/core/observer/index.js 将data转为响应式的
            -> isServerRendering --src/core/util/env.js 判断是否为服务器端渲染
               Observer --src/core/observe/index.js Observer构造函数
               -> def --src/core/util/lang.js 对象添加一个属性，该属性不可枚举
                  hasProto --src/core/util/env.js 判断对象实例是否可使用__proto__
                  arrayMethods --src/core/observe/array.js 以Array为原型的对象实例
                    -> 重写push pop shift unshift splice reverse sort方法
                  protoAugment 更改某个对象实例的原型
                  copyAugment 对象或数组添加一些不可枚举的属性或方法
                  observeArray 
                  walk
                    -> defineReactive --src/core/observe/index.js 数据对象的数据属性转为访问器属性
                         -> Dep --src/core/observer/dep.js 
                              -> depend 添加依赖
                       dependArray --src/core/observer/index.js 递归遍历数据，收集依赖

     initComputed
     initWatch

src/core/instance/state.js
stateMixin
Vue.prototype.$set = set 为对象或数组添加响应式属性
(Vue.set = set，与全局set配置行为一致)
  -> set --src/core/observe/index.js 
       -> isValidArrayIndex --src/shared/util.js 是否为有效的索引
Vue.prototype.$delete = del 为对象或数组删除响应式属性
(Vue.delete = del，与全局del配置行为一致)
  -> del --src/core/observe/index.js 
       -> isValidArrayIndex --src/shared/util.js 是否为有效的索引

mountComponent --src/core/instance/lifecycle.js 
  -> callHook  执行生命周期钩子对应的函数数组
     updateComponent 调用vm.$option.render函数生成虚拟DOM，并将虚拟DOM渲染为真正的DOM
     Watcher --src/core/observer/watcher.js 
       -> parsePath --src/core/util/lang.js 字符串分隔，触发getter，返回一个函数
          get 求值，并触发getter
            -> pushTarget --src/core/observer/dep.js Dep.target赋值
          cleanupDeps 清空本次求值收集的依赖
          addDep 收集依赖
          update 通知变化
            -> queueWatcher --src/core/observer/scheduler.js 

          run 同步更新变化


知识点
1.任何组件都可以隐式使用keep-alive等内置资源，是因为在子组件或new实例初始化时，
  资源（components/directives/filters）选项合并了Vue构造函数options静态属性。
  代码见src/core/util/options.js -mergeOptions-mergeAssets
2.Vue自动检测父级实例
3.抽象组件：一般不渲染真实的DOM，且不会出现在DOM渲染时父子关系路径上（即不能做父
  级实例），但可以提供一些特殊的功能，例如keep-alive、transition。
4.data选项某个属性的值为嵌套对象，且该属性有getter函数无setter函数，是不会对嵌套
  对象深度观测的，即watch挂载的观测依赖不生效
5.在不改变函数代码的情况下，对其扩展的小技巧：保存原函数，在重写原函数，并在重写后
  函数调用原函数
  function say(){}
  var sayHi = say
  say = function() {
     ...
     sayHi()
  }
6.Vue.set/vm.$set不能在根级数据对象（data选项）或Vue实例上添加响应式属性，是因为
  data收集不到新添加属性的依赖，即使添加了，也无法被观测
7.集合类型数据，被观察，其内部数据项也会被观察，是因为任意数据项改变，会造成集合类
  型发生改变，进而触发依赖。
  集合类型数据与其数据项收集同一依赖
8.对于数组，例如arr[0]/arr[0] = 1,不是响应的，是因为索引不是响应的。
  可通过vm.$set(arr,0,1)，触发响应
9.Vue.set/vm.$set可使Vue拦截一个对象或数组添加元素或属性的行为
10.挂载点不能是body、html元素，是因为挂载点为组件的占位，将来会被组件的模板替换掉，
   body、html元素显然是不能被替换
11.在创建vue观察者实例时，即watch选项或vm.$watch,options可配置五个选项：
   options.deep 当前观察者实例是否是深度观测
   options.user 当前观察者实例是开发者定义还是内置的
   options.lazy 当前观察者实例是否是惰性属性的观察者（如计算属性），
                true表示还未求值，false表示已经求过值
   options.sync 通知观察者数据发生变化时是否同步更新变化
   options.before 当数据发生变化之后，触发更新之前，调用before选项
